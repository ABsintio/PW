Le classi specifiche per la definizione di pagina JSP:

    javax.servlet.jsp 
    javax.servlet.jsp.tagext

Il JSP container (al momento della prima invocazione della pagina):
    1. Legge la pagina JSP
    2. Scrive una servlet (corrispondente alla pagina letta)
    3. La compila
    4. La invoca secondo il ciclo di vita della servlet stessa

Alle invocazioni successive il container fa riferimento alla servlet già caricata, quindi esegue solo il metodo di servizio. Come per le servlet, le JSP utilizzano un oggetto: request per la richiesta e response, hanno inoltre accesso a tutti i dati della richiesta, del contesto e dell'applcicazione web.

COMPONENTI
    - Direttive, istruzioni dirette al servlet/JSP container che specificano come gestire la JSP
    - Azioni
        - Scriplet (e varianti, come espressioni, dichiarazioni ecc.)
        - Azioni standard
        - Tag personalizzati

Direttive
Istruzioni dirette al JSP container. Consentono al programmatore di specificare impostazioni della pagina, contenuti esterni da includere o package da importare, librerie di tag personalizzati utilizzabili nella pagina. 

Sintassi:

    <%@ direttiva {attr="valore"}%>

    Es.
        <%@ page language="java" import="..."%> specifica il linguaggio di scripting 
        <%@ include file="relativeURLspec"%> specifica il percorso relativo di un file da includere.

    Direttive "page":
        - import -> Fornisce elenco di package da importare. Utile per non dover scrivere tutto il 
                    percorso dei package.

        - session="true|false" -> se True allora la pagina ha la variabile implicita session. 
                                  Di default è true.
        
        - isThreadSafe="true|false" -> Se true, il container può inviare alla pagina nuove richieste
                                       prima che vengano completate le richieste in corso. Di default  
                                       è true.

        - errorPage="URL" -> Se su questa pagina si verifica un'eccezione non catturata, il container
                             passerà alla pagina qui indicata.
        
        - isErrorPage="true|false" -> Se true la pagina attuale è di una pagina di errore. 

Azioni 
Sono codifica in un linguaggio di programmazione.
Specificate sotto forma di 

    scriplet:
        - codice puro <% sorgente scriplet %>
        - Varianti 
            - espressioni <%=espressione %>
            - dichiarazioni <%! Dichiarazione %>
            - commento <%-- commento --%>
    
    azione standard
        
        <jsp:actionName attributo="valore">body</jsp:faiqualcosa>
    
    tag personalizzati

        <tagPrefix:tagName attributo="valore">body</tag>

Scriplet
Sono blocchi di codice eseguiti nel contesto della pagina. Consentono l'inserimento di codice Java all'interno della pagina JSP. Realizzano l'elaborazione della richiesta, interagiscono con gli elementi della pagina e altre componenti per creare pagine dinamiche. Delimitate da <% e %>, presentano blocchi di codice Java e sono inserite nel metodo _jspService al momento della traduzione. Scriplet e HTML possono essere intercalati per creare diverse risposte sulla base di informazioni incluse nella richiesta.

Commenti
Tre tipi
    - JSP comment -> <%--  -->
        - non si usa all'interno di uno scriplet
        - non è visibile al client 
    - HTML comment -> <!--  -->
        - non si usa all'intero di uno scriplet
        - visibile al client 
    - language comment -> // o /**/
        - si usa solo all'interno di uno scriplet
        - visibile al client? No

Espresioni 
Delimitate da <%= e %> e contengono espressioni JAVA che vengono valutate quanto il client richiede la pagina che le contiene. Il container converte in risultato di un'espressione in un oggetto String e lo invia in output come parte della risposta.

Dichiarazioni 
Delimitate da <%! e %> e consentono la definizione di variabili e metodi attraverso la sintassi java. Le variabili diventano attributi della classe servlet che rappresenta la pagina JSP. I metodi così dichiarati corrisponderanno ai metodi della classe servlet che rappresenta la pagina JSP. La stessa variabile senza <%! diventa var locale di _jspService().

Azioni standard
tag JSP dal comportamento predefinito, comportano l'esecuzione di codice, parametrizzato in base agli attributi del tag.

Librerie di tag personalizzati
Meccanismo di estensione dei tag JSP predefiniti. Consente la definizione di nuovi tag da parte del programmatore, nuovi tag possono incapsulare complesse funzionalità

AREE DI VISIBILITÀ
Le pagine JSP possono accedere ad oggetti definiti in diverse aree di visibilità (scope):
    - Applicazione: oggetti associati al contesto servlet della JSP e per recuperare tali oggetti si usa
                    il metodo 
                    
                        javax.servlet.ServletContext.getAttribute()
                    
                    Oggetti impliciti: 
                    - application (javax.servlet.ServletContext) rappresenta il container.

                        - Oggetto che fornisce informazioni sul contesto di esecuzione della JSP. 
                        - Rappresenta la web application a cui la JSP appartiene.
                        - Consente di interagire con l'ambiente di esecuzione
                            - garantisce accesso a risorse server-side
                            - permette l'accesso ai parametri di inizializzazione relativi all'app.
                            - consente di gestire gli attributi di un'applicazione. 
    
    - Pagina: Oggetti che sono visibili solo al codice presente sulla stessa pagina. Per accedervi si usa
              il metodo 
              
                        javax.servlet.jsp.PageContext.getAttribute(). 
                        
              Una volta completata la richiesta della pagina il container elimina il riferimento a tali oggetti. Oggetti impliciti:
              - config (javax.servlet.ServletConfig) opzioni di configurazione JSP 
              - exception (javax.lang.Throwable) errore passato alla pagina JSP di errore.

                - Oggetto connesso alla gestione degli errori 
                - Rappresenta l'eccezione che non viene gestita da nessun blocco catch 
                - Non è automaticamente disponibile in tutte le pagine ma solo nella errorPage.

              - out (javax.servlet.jsp.JspWriter) scrive testo nella risposta ad un richiesta.
              - page (java.lang.Object) rappresenta il "this" per la JSP corrente.
              
                - Rappresenta l'istanza corrente della servlet corrispondente alla JSP.
                - Tipo interfaccio HTTPJspPage che discende da JSPpage che estende Servlet. 
                - Può essere utilizzato per accdere a tutti i metodi definiti nelle servlet 

              - pageContext (javax.servlet.jsp.PageContext)

                - Oggetto che fornisce informazioni sul contesto di esecuzione della JSP. 
                - Rappresenta l'insieme degli oggetti impliciti di una JSP. 
                - Contente l'accesso a tutti gli occetti impliciti e ai loro attributi tramite 
                    getPage()
                    getRequest()
                    getResponse()
                    getSession()
                    getServletContext()
                    getException()
                    etc ...
                - Poco usato per lo scripting ma utile per costruire custom tags.

              - response (javax.servlet.ServletResponse)

    - Richiesta: visibilità uguale alla richiesta, vi si accede tramite il metodo 

                        javax.servlet.ServletRequest.getAttribute()
                
                 Viene eliminato il riferimento a tali oggetti nel momento in cui viene inviata la risposta. Oggetti impliciti
                 - request (javax.servlet.ServletRequest) la richiesta.
    
    - Sessione: Oggetti associati ad una sessione utente. Vi si accede tramite il metodo 

                        javax.servlet.http.HttpSession.getAttribute()
                
                Viene eliminato il riferimento a tali oggetti nel momento in cui viene la sessione termina (per volere dell'utente oppure timeout). Oggetti impliciti
                - session (javax.servlet.http.HttpSession) sessione del client.

