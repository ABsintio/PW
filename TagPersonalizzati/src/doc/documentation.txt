TAG PERSONALIZZATI

Sono la caratteristica più potente delle pagine jsp in quanto incapsulano le funzionalità complesse del software ed aiutano di molto gli sviluppatori e gli autori di pagine web. Le funzionalità dei tag vengono definite all'interno di classi Java che implementano l'interfaccia javax.servlet.jsp.tagext.Tag e per poter compilare le classi che definiscono i tag bisogna includere il file /opt/tomcat/latest/lib/jsp-api.jar nel CLASSPATH. 

COME DEFINIRE I TAG

I passi che bisogna effettuare per definire un tag personalizzato sono i seguenti:
    
    1. Definire, per ogni tag, una classe Handler del tag che ne implementi le funionalità.
    2. Definire un descrittore della libreria di tag (TLD)
    3. Scrivere le pagine JSP che fanno uso della libreri dei tag personalizzati 
        - Invocare la direttiva per la localizzazione del descrittore della TLD 
        - Utilizzare i tag all'interno della pagina.

LA CLASSE HANDLER

Essa è la classe contiene la logica del tag ed implementa l'interfaccia Tag. Quando il container incontra un tag personalizzato creao l'oggetto tag handler ed invoca i metodi dell'interfaccia Tag necessari ad attivare la logica del tag. In genere si estendono le classi TagSupport oppure BodyTagSupport che implementano l'interfaccia Tag. 

    - TagSupport viene utilizzata per tag che non elaborano il contenuto del proprio body
    - BodyTagSupport viene utilizzata per tag che elaborano il contenuto del proprio body

I metodi che vengnon definiti dall'interfaccia Tag sono i seguenti 
    
    - void setPageContext(PageContext)
    - void setParent(Tag)
    - int doStartTag() throws JspException
    - int doEndTag()   throws JspException
    - void release()
    - Tag getParent()

I primi cinque vengono invocati nell'ordine indicato quando viene elaborato un tag all'interno di una pagina JSP.
I tag handler devono obbligatoriamente essere definiti all'interno di package. 

DESCRITTORE DELLA LIBRERIA

Questa direttiva è necessaria per poter utilizzare i tag personalizzati. Individua il percorso di un descrittore della libreria e un prefisso che verrà utilizzato per accedere agli elementi della libreria.

    - uri: Specifica il percorso relativo o assoluto del tag library description (tld)
    - prefix: Sepecifica il prefisso richiesto per distinguere i tag personalizzati dei tag 
      built-in. I prefissi jsp, jspx, java, javax, servlet, sun e sunw sono riservati.

    <%@ taglib uri="/WEB-INF/tlds/mialib.tld" prefix=""util%>

SCRIVERE LA PAGINA JSP CHE UTILIZZA IL TAG PERSONALIZZATO

Esmpio

    <html>
    <head>
        <title>Pagina che visualizza un messaggio di benvenuto</title>
    </head>
    <body>
        <%@taglib uri="/WEB-INF/tlds/lib.tld" prefix="util"%>
        Questo messaggio: <b><util:welcome/></b></br>
        è stato prodotto da un tag personalizzato.
    </body>
    </html>

CUSTOM TAG CON ATTRIBUTI

I tag personalizzati possono avere un qualunque numero di attributi, obbligatori o facoltativi specificati come attributo=valore, es <util:iterate times="4">

    1. Scrivere il tag con il relativo attributo nel file JSP.
    2. Aggiungere un tag di attributo al TLD.
    3. Implementare il metodo setAttributo nell'handler del tag.

Quando il container incontra il tag crea l'oggetto tag handler e invoca i metodi setter necessari per impostare i valori dei degli attributi. E' prassi comune implementare anche un metodo getter nell'handler del tag per permettere ai tag annidati di accedere alle proprietà degli altri. Il file tld deve contenere per ogni tag l'elenco degli attributi ad esso relativi, ciascuno specificato attraverso un elemento <attribute> che contiene a sua volta gli elementi 

    - <name> (nome dell'attributo)
    - <required> (indica se l'attributo è necessario oppure no)
    - <rtexprvalue> (indica se l'attributo deve essere specificato come stringa o se è permessa 
                     l'elaborazione a tempo di esecuzione).

CICLO DI VITA DI UN TAG 

1. Il metodo setPageContext(PageContext) configura il contesto di pagina associato al tag.
2. Il metodo setParent(Tag) associa un genitore al tag:
    - Tutti i tag hanno un genitore, che è null per i tag di livello superiore ed è il tag 
      contenitore per i tag annidati

    <esempio:tag_esterno>
        <esempio:tag_intermedio>
            <esmepio:tag_interno>
            ...
            </esempio:tag_interno>
        </esempio:tag_intermedio>
    </esempio:tag_esterno>

    Entrambi questi metodi sono risolvti a coloro che implementano il contenitore delle servlet e non agli sviluppatori JSP.

3. Se il tag prevede degli attributi, vengono invocati tutti i metodi necessari a configurare i valori (set)
4. Il metodo doStartTag() viene invocato subito dopo i primi due e gli eventuali metodi setter. 
    - Tale metodo resituisce un valore intero che condiziona l'elaborazione del tag.
        - SKIP_BODY: il corpo del tag non viene considerato
        - EVAL_BODY_INCLUDE: il corpo del tag deve essere trascritto invariato.

   Il metodo doEndTag() viene chiamato in corrispondenza del tag di chiusura 
    - Tale metodo resituisce un valore intero che condiziona l'elaborazione del tag.
        - SKIP_PAGE: la parte di pagina oltre il tag di chiusura viene ignorata
        - EVAL_PAGE: la parte di pagine oltre il tag di chiusura viene considerata 

5. Il metodo release() rilascia le risorse dell'handler del tag. 

TAG CHE INCLUDONO IL CORPO

Questi tag non richiedono i estendere BodyTagSupport se il corpo del tag non richiede elaborazione.

    <prefx:tagName>
        JSP Content
    </prefix:tagName>
    <prefix:tagName att1="val1" ...>
        JSP Content
    </prefix:tagName>

Viene utilizzato il metodo doStartTag per includere il corpo. Questo restituisce EVAL_BODY_INCLUDE invece del classico SKIP_BODY. Il metodo che definisce le azioni da intraprendere dopo l'inclusione del corpo è doEndTag. Quest'ultimo restituisce EVAL_PAGE oppure SKIP_PAGE a seconda dei casi.

L'unica novità rispetto ai tag precedente è che nella definizione del tag nel tld dobbiamo impostare anche il campo <bodycontent>JSP</bodycontent>.

INTERFACCIA BODYTAG 

Gli handler di tag con corpo che implementano l'interfaccia BodyTag dispongono di due funzionalità mancanti agli altri tag:
    - Possono contenere codice iterativo
    - Possono manipolare il contenuto del loro corpo 

L'interfaccia BodyTag estende l'interfaccia Tag (estende IterationTag che estende Tag) definendo i metodi elencati di seguito:
    
    1. void setBodyContent()
    2. void doInitBody()
    3. int doAfterBody()

Il metodo doStartTag() restituisce un valore intero che condiziona l'elaborazione del corpo del tag 
    - SKIP_BODY: il corpo del tag non deve essere considerato 
    - EVAL_BODY_INCLUDE: il corpo del tag viene elaborato:
        - il corpo viene valutato e passato in output
        - Viene invocato il metodo doAfterBody() (eseguito una o più volte)
        - ... poi viene invocato doEndTag()
    - EVAL_BODY_BUFFERED: il corpo del tag viene elaborato e viene creato un oggetto BodyContent (sottoclasse di JspWriter) utilizzato come oggetto out (Nota: BodyContent viene creato solo se si ritorna EVAL_BODY_BUFFERED).

Il metodo setBodyContent() configura le proprietà dell'oggetto BodyContent. Quando viene invocato, il valore dell'oggetto implicito out viene sostituito nell'oggetto PageContext.

Il metodo doInitBody() viene invocato dal container dopo setBodyContent e prima che il corpo del tag venga valutato per la prima volta. Questo metodo viene invocato per tag vuoti e per i quali il metodo doStartTag abbia restituito SKIP_BODY o EVAL_BODY_INCLUDE.

Il metodo in cui bisogna definire il comportamento per tag che devono modificare/elaborare il corpo è doAfterBody. Tale metodo restituisce un valore che condiziona l'elaborazione del tag: SKIP_BODY, EVAL_BODY_AGAIN.

CLASSE BODYTAGSUPPORT

Tale classe estende la classe TagSupport e implementa BodyTag. Introduce i nuovi metodi

    1. BodyContent getBodyContent()
    2. JspWriter getPreviousOut()
        -> restituisce lo scrittore associato al tag genitore o la variabile implicita out se il tag è di livello superiore.

Per impostazione predefinita le estensioni di BodyTagSupport valutano il corpo del tag una volta soltanto.

FUNZIONAMENTO DI BODYCONTENT 

Il contenuto del corpo è rappresentato dalla classe BodyContent (scrittore con buffer) che estende JspWriter. I contenitori servlet matengono uno stack di oggetto BodyContent per fare in modo che un tag annidato non sovrascriva il contenuto del corpo di uno dei tag antenati. Ciascun oggetto BodyContent conserva un riferimento allo scrittore con buffer del livello inferiore dello stack. Tale scrittore è noto come PreviousOut ed è disponibile attraverso 
    - BodyContent.getEnclosingWriter
    - BodyTagSupport.getPreviousOut